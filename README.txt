PKI CA Server (X.509, OCSP, CRL, UI)

Общее описание
Проект реализует удостоверяющий центр (CA), поддерживающий:
- Выпуск X.509 сертификатов по CSR и по данным напрямую
- Проверку статуса сертификатов через OCSP (RFC 6960)
- Отзыв сертификатов с ведением CRL (Certificate Revocation List)
- Подпись OCSP-ответов с использованием RSA (PKCS#1 v1.5)
- Web-интерфейс клиента на Gradio
- Разделение ролей Root CA / Intermediate CA
- Работа с публичными и приватными ключами в PEM-формате

Взаимодействие компонентов
Компоненты: FastAPI backend (сервер), Gradio UI (клиент), структура `data/` (сертификаты, ключи).
Обмен данными идёт по HTTP, преимущественно JSON. Сертификаты и ключи — в формате PEM.

Хранение и структура:
- data/keys/ — приватные ключи CA
- data/certs/ — публичные сертификаты CA
- Пароли к приватным ключам хранятся в переменных окружения или .env
- Сертификаты пользователей не сохраняются на сервере после выдачи

Форматы данных:
- Все сертификаты: X.509 v3, RFC 5280
- Подписи OCSP: RSA + SHA256 (RFC 6960)
- Ключи: RSA 2048-bit, формат PEM
- Все поля в запросах — в UTF-8

API Взаимодействия по эндпоинтам

POST /api/v1/csr/
Назначение: Отправка CSR и выпуск сертификата.
Запрос:
{
  "csr_pem": "-----BEGIN CERTIFICATE REQUEST-----...",
  "ca_name": "int1"
}
Ответ:
{
  "certificate_pem": "-----BEGIN CERTIFICATE-----...",
  "serial_number": "123456789012345678"
}

POST /api/v1/issue/
Генерация сертификата по данным без CSR.
Запрос:
{
  "subject": {
    "common_name": "John Doe",
    "country_name": "RU",
    "state_or_province": "Moscow",
    "locality": "Moscow",
    "organization": "Example Corp",
    "organizational_unit": "IT",
    "email": "john@example.com"
  },
  "ca_name": "int1"
}
Ответ:
{
  "certificate_pem": "...",
  "private_key_pem": "...",
  "serial_number": "..."
}
Примечание: используется в UI для генерации пары ключ + сертификат.
Серийные номера генерируются с использованием криптостойкой случайности (160 бит) для обеспечения уникальности (в соответствии с рекомендациями RFC 5280).

Срок действия сертификатов:
- Все выпускаемые X.509 сертификаты действуют по умолчанию 365 дней.
- Значения `notBefore` и `notAfter` задаются на стороне CA.

POST /api/v1/revoke/
Назначение: Отзыв ранее выданного сертификата.
Запрос:
{
  "serial_number": 1234567890,
  "reason": "Key compromise"
}
Ответ:
{
  "serial_number": 1234567890,
  "revocation_date": "...",
  "reason": "Key compromise"
}

GET /api/v1/crl/
Назначение: Получение CRL (списка отозванных сертификатов).
Ответ:
[
  {
    "serial_number": "...",
    "revocation_date": "...",
    "reason": "..."
  }
]

POST /api/v1/ocsp/
Назначение: Проверка статуса сертификата.
Запрос:
{
  "serial_number": "1234567890"
}
Ответ:
{
  "serial_number": "...",
  "status": "good" | "revoked" | "unknown",
  "issuer": "...",
  "issuer_public_key": "...",
  "revoked_at": "...",          // при revoked
  "revocation_reason": "...",   // при revoked
  "signature": "<base64>"
}
Ответ подписан приватным ключом CA, который выдал или отозвал сертификат.

GET /api/v1/ocsp/issuer-key/{issuer_name}
Назначение: Получение публичного ключа CA по имени.
Пример: /issuer-key/Root CA

GET /api/v1/crt/ca/{name}
Назначение: Получение публичного CA-сертификата.
Пример: /crt/ca/int1

POST /api/v1/admin/login
Назначение: Авторизация администратора.
Запрос:
{
  "password": "..."
}
Ответ:
{
  "status": "ok"
}

GET /health
Назначение: Проверка состояния сервиса.
Ответ:
{
  "status": "ok"
}

Политика сертификации (RFC 3647)

OID политики: 1.2.643.100.111.1.1
Версия: 1.0

Участники:
- CA: выпускает и отзывает сертификаты
- Владельцы: создают ключи и CSR
- Проверяющие: запрашивают статус (OCSP)

Жизненный цикл сертификата:
- Пользователь → UI → генерация запроса → выпуск/подпись → получен сертификат
- По необходимости — отзыв по API → попадание в CRL
- Проверка валидности — OCSP-запрос

Технические меры:
- Все приватные ключи CA зашифрованы
- Пароли к ключам задаются через .env
- Подписи только RSA, алгоритм — SHA-256
- Все действия (выпуск/отзыв) логируются
- Пароли администратора хранятся в зашифрованном виде (AES + B64)

Структура проекта:
src/
├── client/
│   ├── ui.py — Gradio-интерфейс
│   └── utils.py — общие вызовы API
├── server/
│   ├── api/ — маршруты FastAPI
│   ├── crypto/ — логика подписи и OCSP
│   └── main.py — точка входа
data/
├── certs/ — публичные ключи
└── keys/ — приватные ключи CA

Хранение ключей и сертификатов:
- Приватные ключи CA хранятся в зашифрованном виде в директории `data/keys/`.
- Сертификаты CA и выданные X.509 находятся в `data/certs/`.
- CRL формируется автоматически при отзыве и доступен через `/api/v1/crl/`.

Формат хранения соответствует PEM (Base64 + BEGIN/END).

UI-интерфейс:
- Выпуск X.509 (автоматически генерирует ключ)
- Отзыв (с авторизацией)
- Получение CRL
- Проверка статуса OCSP
- Получение публичного ключа любого CA
- Интерактивное руководство

Запуск:
uvicorn src.server.main:app --reload
python src/client/app.py

Требования:
- Python 3.11+
- FastAPI, Cryptography, Gradio

Требуется файл .env с переменными:
- ROOT_CA_PASSPHRASE
- INT1_CA_PASSPHRASE
- INT2_CA_PASSPHRASE
- ADMIN_AES_KEY_B64
- ADMIN_PASSWORD_ENC

Стандарты:
- RFC 5280 — структура X.509
- RFC 6960 — OCSP
- RFC 3647 — структура политики сертификации